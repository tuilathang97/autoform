function e(e,t,r={}){if("debug"===e)return;const a={timestamp:(new Date).toISOString(),level:e,message:t,...r};"error"===e?console.error(JSON.stringify(a)):"warn"===e?console.warn(JSON.stringify(a)):console.log(JSON.stringify(a))}const t=6e4,r=30,a=new Map;function n(t){const r=t.url&&t.url.startsWith("chrome-extension://");return e("debug","Extension sender validation",{sender:t,isValid:r}),r}setInterval((()=>{a.clear()}),t);const s={GET_TAB_ID:async(t,r)=>{const[a]=await chrome.tabs.query({active:!0,currentWindow:!0});return e("info","Getting active tab ID",{tabId:a.id}),{tabId:a.id}},PROCESS_API_RESPONSE:(t,r)=>{if((a=t.data)&&"object"==typeof a&&"data"in a&&"meta"in a){const r=function(e){return{data:e.data,meta:{requestId:e.meta.requestId,timestamp:e.meta.timestamp}}}(t.data);return e("debug","Processed API response",{original:t.data,sanitized:r}),{data:r}}var a;throw new Error("Invalid API response")},PROCESS_DOCX:async(t,r)=>{try{if(e("info","Processing DOCX file",{file:t.file}),!t.file)throw e("error","No file provided for processing"),new Error("No file provided");return{success:!0,formData:await async function(){return{fields:[{name:"firstName",type:"text",value:""},{name:"lastName",type:"text",value:""},{name:"email",type:"email",value:""}]}}(t.file),timestamp:Date.now()}}catch(a){return e("error","DOCX processing failed",{error:a.message,stack:a.stack}),e("info","Successfully processed DOCX",{formData:formData}),{success:!1,error:a.message}}}};chrome.runtime.onMessage.addListener(((t,i,o)=>{var d;if(e("debug","Received message",{request:t,sender:i}),!n(i)&&!function(t){const r=t.tab&&t.tab.id;return e("debug","Content script sender validation",{sender:t,isValid:r}),r}(i))return e("warn","Message from untrusted source",{sender:i}),!1;const c=(null==(d=i.tab)?void 0:d.id)||i.url,u=a.get(c)||0;return u>=r?(e("warn","Rate limit exceeded",{senderKey:c,currentCount:u}),o({error:"Rate limit exceeded. Please try again later."}),!1):(a.set(c,u+1),s[t.type]?"PROCESS_FILES"!==t.type||n(i)?(Promise.resolve(s[t.type](t,i)).then(o).catch((e=>o({error:e.message}))),!0):(e("warn","File processing attempted from untrusted source",{sender:i}),!1):void 0)})),e("info","Background service worker initialized");
