function e(e,r,t={}){if("debug"===e)return;const s={timestamp:(new Date).toISOString(),level:e,message:r,...t};"error"===e?console.error(JSON.stringify(s)):"warn"===e?console.warn(JSON.stringify(s)):console.log(JSON.stringify(s))}const r=6e4,t=30,s=new Map;function n(r){const t=r.url&&r.url.startsWith("chrome-extension://");return e("debug","Extension sender validation",{sender:r,isValid:t}),t}setInterval((()=>{s.clear()}),r);const a={GET_TAB_ID:async(r,t)=>{const[s]=await chrome.tabs.query({active:!0,currentWindow:!0});return e("info","Getting active tab ID",{tabId:s.id}),{tabId:s.id}},PROCESS_API_RESPONSE:(r,t)=>{if((s=r.data)&&"object"==typeof s&&"data"in s&&"meta"in s){const t=function(e){return{data:e.data,meta:{requestId:e.meta.requestId,timestamp:e.meta.timestamp}}}(r.data);return e("debug","Processed API response",{original:r.data,sanitized:t}),{data:t}}var s;throw new Error("Invalid API response")},PROCESS_FILES:async(r,t)=>{var s;try{if(e("info","Processing files",{files:r.files}),!(null==(s=r.files)?void 0:s.length))throw new Error("No files provided");const t=[];for(const s of r.files)try{if("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"!==s.type&&"application/vnd.ms-excel"!==s.type)throw new Error(`Unsupported file type: ${s.type}`);{const e=await o(s);t.push({fileName:s.name,success:!0,data:e})}}catch(n){e("error","File processing failed",{file:s.name,error:n.message}),t.push({fileName:s.name,success:!1,error:n.message})}return{success:t.some((e=>e.success)),filesProcessed:t.length,results:t,timestamp:Date.now()}}catch(a){return e("error","File processing failed",{error:a}),{success:!1,error:a.message}}},PROCESS_DOCX:async(r,t)=>{try{if(e("info","Processing DOCX file",{file:r.file}),!r.file)throw e("error","No file provided for processing"),new Error("No file provided");return{success:!0,formData:await async function(){return{fields:[{name:"firstName",type:"text",value:""},{name:"lastName",type:"text",value:""},{name:"email",type:"email",value:""}]}}(r.file),timestamp:Date.now()}}catch(s){return e("error","DOCX processing failed",{error:s.message,stack:s.stack}),{success:!1,error:s.message}}}};async function o(e){return{fields:[{name:"firstName",type:"text",value:"John"},{name:"lastName",type:"text",value:"Doe"},{name:"email",type:"email",value:"john.doe@example.com"}]}}chrome.runtime.onMessage.addListener((async(r,o,i)=>{var c;try{if(e("debug","Received message",{request:r,sender:o}),!n(o)&&!function(r){const t=r.tab&&r.tab.id;return e("debug","Content script sender validation",{sender:r,isValid:t}),t}(o))return e("warn","Message from untrusted source",{sender:o}),i({error:"Untrusted message source"}),!1;const d=(null==(c=o.tab)?void 0:c.id)||o.url,u=s.get(d)||0;if(u>=t)return e("warn","Rate limit exceeded",{senderKey:d,currentCount:u}),i({error:"Rate limit exceeded. Please try again later."}),!1;if(s.set(d,u+1),!a[r.type])return e("warn","Unknown message type",{type:r.type}),i({error:"Invalid message type"}),!1;if("PROCESS_FILES"===r.type&&!n(o))return e("warn","File processing attempted from untrusted source",{sender:o}),i({error:"Unauthorized file processing request"}),!1;try{if(a[r.type]){const e=!0;return a[r.type](r,o).then((e=>{i(e||{success:!1,error:"Empty response"})})).catch((e=>{i({success:!1,error:e.message})})),e}return e("warn","No handler found for message type",{type:r.type}),i({error:"No handler found for message type"}),!1}catch(l){return e("error","Unexpected error in message listener",{error:l}),i({error:"Internal server error"}),!1}}catch(d){e("error",d)}})),e("info","Background service worker initialized");
