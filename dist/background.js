function e(e,r,t={}){const s={timestamp:(new Date).toISOString(),level:e,message:r,...t};"debug"===e?console.debug(JSON.stringify(s)):"error"===e?console.error(JSON.stringify(s)):"warn"===e?console.warn(JSON.stringify(s)):console.log(JSON.stringify(s))}const r=new Map;function t(r){const t=r.url&&r.url.startsWith("chrome-extension://");return e("debug","Extension sender validation",{sender:r,isValid:t}),t}setInterval((()=>{r.clear()}),6e4);const s={GET_TAB_ID:async(r,t)=>{const[s]=await chrome.tabs.query({active:!0,currentWindow:!0});return e("info","Getting active tab ID",{tabId:s.id}),{tabId:s.id}},PROCESS_API_RESPONSE:(r,t)=>{if((s=r.data)&&"object"==typeof s&&"data"in s&&"meta"in s){const t=function(e){return{data:e.data,meta:{requestId:e.meta.requestId,timestamp:e.meta.timestamp}}}(r.data);return e("debug","Processed API response",{original:r.data,sanitized:t}),{data:t}}var s;throw new Error("Invalid API response")},PROCESS_FILES:async(r,t)=>{var s;try{if(e("info","Processing files",{files:r.files}),!(null==(s=r.files)?void 0:s.length))throw new Error("No files provided");const t=[];for(const s of r.files)try{if("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"!==s.type&&"application/vnd.ms-excel"!==s.type)throw new Error(`Unsupported file type: ${s.type}`);{const e=await n(s);t.push({fileName:s.name,success:!0,data:e})}}catch(a){e("error","File processing failed",{file:s.name,error:a.message}),t.push({fileName:s.name,success:!1,error:a.message})}return{success:t.some((e=>e.success)),filesProcessed:t.length,results:t,timestamp:Date.now()}}catch(o){return e("error","File processing failed",{error:o}),{success:!1,error:o.message}}},PROCESS_DOCX:async(r,t)=>{try{if(e("info","Processing DOCX file",{file:r.file}),!r.file)throw e("error","No file provided for processing"),new Error("No file provided");return{success:!0,formData:await async function(){return{fields:[{name:"firstName",type:"text",value:""},{name:"lastName",type:"text",value:""},{name:"email",type:"email",value:""}]}}(r.file),timestamp:Date.now()}}catch(s){return e("error","DOCX processing failed",{error:s.message,stack:s.stack}),{success:!1,error:s.message}}}};async function n(e){return{fields:[{name:"firstName",type:"text",value:"John"},{name:"lastName",type:"text",value:"Doe"},{name:"email",type:"email",value:"john.doe@example.com"}]}}chrome.runtime.onMessage.addListener(((r,n,a)=>{try{if(e("info","Received message",{request:r,sender:n}),!t(n)&&!function(r){const t=r.tab&&r.tab.id;return e("debug","Content script sender validation",{sender:r,isValid:t}),t}(n))return e("warn","Message from untrusted source",{sender:n}),a({error:"Untrusted message source"}),!0;if("PROCESS_FILES"===r.type&&!t(n))return e("info","File processing attempted from untrusted source",{sender:n}),a({error:"Unauthorized file processing request"}),!0;try{return e("info","Prepare to handle message",{type:r.type,sender:n}),s[r.type]?((async()=>{try{const e=await s[r.type](r,n);a(e)}catch(e){a({error:e.message})}})(),!0):(e("warn","No handler found for message type",{type:r.type}),a({error:"No handler found for message type"}),!0)}catch(o){return e("error","Unexpected error in message listener",{error:o}),a({error:"Internal server error"}),!0}}catch(i){return e("error","Error:",i),!0}})),e("info","Background service worker initialized");
