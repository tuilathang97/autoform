class e{constructor(){this.observer=null,this.domParser=null,this.setupMutationObserver(),this.setupMessageHandlers(),this.initializeDomParser()}setupMutationObserver(){this.observer=new MutationObserver((e=>{e.forEach((e=>{e.addedNodes.length&&this.injectScripts()}))})),this.observer.observe(document.body,{childList:!0,subtree:!0})}setupMessageHandlers(){chrome.runtime.onMessage.addListener(((e,t,o)=>(console.log("Content script received message:",e),"INJECT_SCRIPTS"===e.type?(this.injectScripts().then(o),!0):"FILL_FORM"===e.type?(this.fillForm(e.data).then((e=>{console.log("Form filling result:",e),o(e)})).catch((e=>{console.error("Form filling error:",e),o({success:!1,error:e.message})})),!0):void 0)))}async initializeDomParser(){try{if("function"==typeof window.parseDOM)return this.domParser=window.parseDOM(document),void console.log("DOM parser initialized from global function");console.log("parseDOM not found, injecting script..."),await this.injectScripts();let e=0;const t=5;for(;e<t;){if(await new Promise((e=>setTimeout(e,200))),e++,"function"==typeof window.parseDOM)return this.domParser=window.parseDOM(document),void console.log(`DOM parser initialized after ${e} attempts`);console.log(`Attempt ${e}/${t}: parseDOM not available yet`)}throw new Error(`Failed to initialize DOM parser after ${t} attempts`)}catch(e){console.error("Failed to initialize DOM parser:",e),console.log("Creating fallback DOM parser"),this.domParser=this.createFallbackDomParser()}}createFallbackDomParser(){return{find:e=>document.querySelector(e),findAll:e=>Array.from(document.querySelectorAll(e)),fillForm:(e,t)=>{const o=performance.now(),r=[],s={};e.querySelectorAll("input, select, textarea").forEach((e=>{const t=e.name||e.id;t&&(s[t]={element:e,type:e.type,required:e.required||e.hasAttribute("required")})})),Object.entries(t).forEach((([e,t])=>{const o=s[e];if(o)try{if(o.required&&!t)throw new Error(`Required field missing value: ${e}`);switch(o.type){case"checkbox":o.element.checked=Boolean(t);break;case"radio":const s=document.querySelector(`input[name="${e}"][value="${t}"]`);s?s.checked=!0:r.push(`Invalid value for radio group: ${e}`);break;default:o.element.value=t,o.element.dispatchEvent(new Event("input",{bubbles:!0})),o.element.dispatchEvent(new Event("change",{bubbles:!0}))}}catch(n){r.push(n.message)}else r.push(`Field not found: ${e}`)}));const n=performance.now()-o;return{success:0===r.length,errors:r,duration:n}},measurePerformance(e){const t=performance.now();return{result:e(),duration:performance.now()-t}}}}async injectScripts(){try{const e=document.createElement("script");return e.src=chrome.runtime.getURL("domParser.js"),e.onload=()=>{console.log("domParser script loaded successfully"),e.remove()},(document.head||document.documentElement).appendChild(e),console.log("Scripts injected successfully"),{success:!0}}catch(e){return console.error("Script injection failed:",e),{success:!1,error:e.message}}}async fillForm(e){if(console.log("Filling form with data:",e),!e||!e.fields||!e.fields.length)return{success:!1,error:"No form data provided"};try{if(!this.domParser){try{await this.initializeDomParser()}catch(t){console.warn("Failed to initialize DOM parser, using direct DOM manipulation",t)}this.domParser||(console.log("Creating fallback DOM parser"),this.domParser=this.createFallbackDomParser())}const o=document.querySelectorAll("form");if(0===o.length){const t=document.querySelectorAll("input, select, textarea");if(0===t.length)throw new Error("No form or input fields found on the page");console.log(`No form found, but found ${t.length} input fields. Will attempt to fill them directly.`);const o=document.createElement("div");t.forEach((e=>o.appendChild(e.cloneNode(!0))));const r={};return e.fields.forEach((e=>{r[e.name]=e.value})),e.fields.forEach((e=>{const t=document.querySelector(`input[name="${e.name}"], input[id="${e.name}"], select[name="${e.name}"], select[id="${e.name}"], textarea[name="${e.name}"], textarea[id="${e.name}"]`);if(t){console.log(`Filling field: ${e.name} with value: ${e.value}`);const o=t.style.backgroundColor;if(t.style.backgroundColor="#f5fff0",t.style.transition="background-color 1s","checkbox"===t.type)t.checked=Boolean(e.value);else if("radio"===t.type){const t=document.querySelector(`input[name="${e.name}"][value="${e.value}"]`);t&&(t.checked=!0)}else{t.value=e.value;const o=new Event("input",{bubbles:!0});t.dispatchEvent(o);const r=new Event("change",{bubbles:!0});t.dispatchEvent(r)}setTimeout((()=>{t.style.backgroundColor=o}),2e3)}else console.warn(`Field not found: ${e.name}`)})),chrome.runtime.sendMessage({type:"FORM_FILLING_COMPLETE",processingTime:0,success:!0,fieldsProcessed:e.fields.length}),{success:!0,message:"Filled fields directly"}}const r=o[0];console.log(`Found form with ${r.elements.length} elements`);const s={};e.fields.forEach((e=>{s[e.name]=e.value})),this.addVisualFeedback(r,e.fields);const n=this.domParser.fillForm(r,s);return console.log("Form filling result:",n),e.autoSubmit&&n.success&&(console.log("Auto-submitting form"),setTimeout((()=>{try{r.submit()}catch(e){console.error("Error submitting form:",e)}}),1e3)),chrome.runtime.sendMessage({type:"FORM_FILLING_COMPLETE",processingTime:n.duration,success:n.success,errors:n.errors,fieldsProcessed:Object.keys(s).length}),n}catch(t){return console.error("Error filling form:",t),chrome.runtime.sendMessage({type:"BACKGROUND_ERROR",error:t.message}),{success:!1,error:t.message}}}addVisualFeedback(e,t){t.forEach((t=>{const o=e.querySelector(`[name="${t.name}"], #${t.name}`);if(o){const e=o.style.backgroundColor,t=o.style.border;o.style.backgroundColor="#f5fff0",o.style.border="1px solid #4caf50",o.style.transition="all 0.3s ease";const r=document.createElement("span");r.textContent="âœ“",r.style.color="#4caf50",r.style.position="absolute",r.style.right="5px",r.style.top="50%",r.style.transform="translateY(-50%)",r.style.fontSize="12px",r.style.opacity="0",r.style.transition="opacity 0.5s ease","static"===window.getComputedStyle(o.parentElement).position&&(o.parentElement.style.position="relative"),o.parentElement.appendChild(r),setTimeout((()=>{r.style.opacity="1"}),100),setTimeout((()=>{o.style.backgroundColor=e,o.style.border=t,r.style.opacity="0",setTimeout((()=>{r.parentElement&&r.parentElement.removeChild(r)}),500)}),2e3)}}))}}"loading"===document.readyState?document.addEventListener("DOMContentLoaded",(()=>{console.log("Content script initializing on DOMContentLoaded"),new e})):(console.log("Content script initializing immediately"),new e);
